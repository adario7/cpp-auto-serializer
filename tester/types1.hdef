`
#include <string>
#include <vector>
#include <map>
#include <set>

enum st1_enum : int {
	ST1_A, ST1_B
};
`

using my_int64 = long; // copied int the output header
/* only for internal usage of the auto serailizer,
 * will be discarded during the header generation */
alias st1_enum = int; 

struct st1 {
	st1_enum a = `ST1_B`;
	my_int64 b = `555`;
	bool does_it_work = `false`;
	int* ptr = `nullptr`;
	std::vector<std::string> strings = `{ "v_0", "v_1" }`;
	std::string str = `"initial value"`;
	std::vector<std::vector<int>> matrix;
	std::set<double> doubles;
	std::map<int, float> intToFloat;

	int s_array[`5`] = `{ 11, 22, 33, 44, 55 }`;
	int s_matrix[`3`][`2`] = `{ {10,20}, {31,41}, {50,60} }`;

`
	int getSum(int j) {
		return a + b + j;
	}
	int getDiff(int k);
`
};
