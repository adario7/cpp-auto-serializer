`
#include <string>
#include <vector>
using namespace std;
`

/* specify which type a base4* could be at runtime.
 * the generated deserialization code needs to include the children headers
 * but doing so here (in this .hdef header) would create a cyclic dependency;
 * when we specify the children header in this way it is only included
 * in the generated implementation code, and not in the generated header
*/
polymorphic base4 :
	child4a include "types4a.hh",
	child4b include "types4b.hh",
	child4c /* no need for include directives because it is in the same .hdef header */;

virtual class base4 {
public:
	int data_base = 111;
`
	base4() {}
	base4(int i) : data_base(i) {}
`
};

virtual class child4c : public base4 {
public:
	double data_c = 3.1415;
	`
	child4c() {}
	child4c(int i, double c) : base4(i), data_c(c) {}
	`
};

// wrapper struct, for testing
struct st4 {
	base4* base_ptr_a;
	base4* base_ptr_b;
	base4* base_ptr_c;
};

